---
- name: Machine setup
  hosts: localhost
  become: true
  connection: local
  gather_facts: true
  vars:
    flyctl_version: "0.1.130"
    terraform_version: "1.7.5"
    kubernetes_version: "v1.28"

  tasks:
    - name: Get my user
      ansible.builtin.set_fact:
        remote_regular_user: "{{ ansible_env.SUDO_USER or ansible_user_id }}"

    - name: Check folder exist otherwise create it
      ansible.builtin.file:
        path: ~{{ remote_regular_user }}/.local/bin/
        state: directory
        mode: "0755"

    - name: Install chezmoi (manage my dotfiles)
      ansible.builtin.shell: |        
          curl -fsLS get.chezmoi.io -o ~{{ remote_regular_user }}/.local/bin/chezmoi
      args:
        executable: /bin/bash

    - name: Install mise (ex rtx)
      ansible.builtin.shell: |        
          curl https://mise.run -o ~{{ remote_regular_user }}/.local/bin/mise
      args:
        executable: /bin/bash

    - name: Install Bun
      ansible.builtin.shell: |        
          curl -fsSL https://bun.sh/install -o ~{{ remote_regular_user }}/.local/bin/burn
      args:
        executable: /bin/bash

    - name: Set owner and permissions
      file:
        path: ~{{ remote_regular_user }}/.local
        state: directory
        recurse: yes
        owner: "{{ remote_regular_user }}"
        mode: "755"
        
    - name: Install Development Tools
      ansible.builtin.shell: |        
          sudo dnf group install "Development Tools" -y
      args:
        executable: /bin/bash

    - name: Install packages
      ansible.builtin.dnf:
        name:
          - cockpit # web console admin on rhel (port 9090 per default)
          - dotnet-sdk-8.0
          - fd-find
          - fzf
          - git
          - helix
          - htop
          - iproute
          - iptables
          - luarocks
          - make
          - net-tools
          - patch
          - podman-compose
          - ripgrep
          - tmux
          - toilet
          - unar
          - vim
          - wl-clipboard
          - zsh
        state: present         

    - name: Make sure cockpit is running
      ansible.builtin.systemd_service:
        state: started
        name: cockpit.socket  

    - name: Change shell to zsh
      ansible.builtin.user:
        name: "{{ remote_regular_user }}"
        shell: /usr/bin/zsh

    - name: Install DNF plugins core
      ansible.builtin.dnf:
        name: dnf-plugins-core
        state: present

    - name: Import Microsoft GPG Key
      ansible.builtin.rpm_key:
        key: https://packages.microsoft.com/keys/microsoft.asc
        state: present

    - name: Add kubectl repo
      ansible.builtin.yum_repository:
        name: Kubernetes
        description: Kubernetes repo
        baseurl: https://pkgs.k8s.io/core:/stable:/{{ kubernetes_version }}/rpm/
        gpgkey: https://pkgs.k8s.io/core:/stable://{{ kubernetes_version }}/rpm/repodata/repomd.xml.key
        gpgcheck: true
        enabled: true

    - name: Install kubectl
      ansible.builtin.dnf:
        name: kubectl
        state: present

    - name: Check if the targeted version of terraform is installed
      ansible.builtin.shell: |        
          /usr/local/bin/terraform version
      register: installed_terraform_version
      ignore_errors: true
      changed_when: false

    - name: Install Terraform
      ansible.builtin.unarchive:
        src: https://releases.hashicorp.com/terraform/{{ terraform_version }}/terraform_{{ terraform_version }}_linux_amd64.zip 
        dest: /usr/local/bin
        remote_src: yes
        mode: "0755"
      when: terraform_version not in installed_terraform_version.stdout  

    - name: Check if the targeted version of flyctl is installed
      ansible.builtin.shell: |        
          /usr/local/bin/flyctl version
      register: installed_flyctl_version
      ignore_errors: true
      changed_when: false

    - name: Download flyctl tar.gz
      ansible.builtin.get_url:
        url: "https://github.com/superfly/flyctl/releases/download/v{{ flyctl_version }}/flyctl_{{ flyctl_version }}_Linux_x86_64.tar.gz"
        dest: "/tmp/flyctl_{{ flyctl_version }}_Linux_x86_64.tar.gz"
        mode: "0644"
      when: flyctl_version not in installed_flyctl_version.stdout

    - name: Extract flyctl to /usr/local/bin
      ansible.builtin.unarchive:
        src: "/tmp/flyctl_{{ flyctl_version }}_Linux_x86_64.tar.gz"
        dest: "/usr/local/bin"
        remote_src: true
      when: flyctl_version not in installed_flyctl_version.stdout

    - name: Ensure fonts directory
      ansible.builtin.file:
        path: "~{{ remote_regular_user }}/.fonts"
        state: directory
        mode: "0755"
        owner: "{{ remote_regular_user }}"

    - name: Check if Jetbrains Mono exists
      ansible.builtin.shell: "ls ~{{ remote_regular_user }}/.fonts/JetBrainsMonoNerd*FontMono*"
      register: jetbrains_mono_exists
      ignore_errors: true
      changed_when: false

    - name: Download Jetbrains mono
      when: jetbrains_mono_exists is failed
      ansible.builtin.unarchive:
        src: https://github.com/ryanoasis/nerd-fonts/releases/download/v3.1.1/JetBrainsMono.zip
        dest: "~{{ remote_regular_user }}/.fonts/"
        remote_src: true
        mode: "0755"
        owner: "{{ remote_regular_user }}"

    - name: Install container-tools
      ansible.builtin.dnf:
        name: container-tools
        state: present

    - name: Install podman-plugins
      ansible.builtin.dnf:
        name: podman-plugins
        state: present

    - name: Install podman-docker
      ansible.builtin.dnf:
        name: podman-docker
        state: present
        